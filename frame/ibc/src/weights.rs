
//! Autogenerated weights for `pallet_ibc`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-22, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `daviraindeMacBook-Pro.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/substrate
// benchmark
// pallet
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_ibc
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./frame/ibc/src/weights
// Copyright 2022 ComposableFi
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use super::*;
use core::marker::PhantomData;
use frame_support::pallet_prelude::Weight;
use ibc::core::{
	ics02_client::msgs::ClientMsg,
	ics03_connection::{context::ConnectionReader, msgs::ConnectionMsg},
	ics04_channel::msgs::{ChannelMsg, PacketMsg},
	ics24_host::identifier::ClientId,
	ics26_routing::msgs::MsgEnvelope,
};
use ibc::core::ics02_client::msgs::create_client::MsgCreateClient;
use ibc::core::ics02_client::msgs::misbehaviour::MsgSubmitMisbehaviour;
use ibc::core::ics02_client::msgs::update_client::MsgUpdateClient;
use ibc::core::ics02_client::msgs::upgrade_client::MsgUpgradeClient;
use ibc::core::ics03_connection::msgs::conn_open_ack::MsgConnectionOpenAck;
use ibc::core::ics03_connection::msgs::conn_open_confirm::MsgConnectionOpenConfirm;
use ibc::core::ics03_connection::msgs::conn_open_init::MsgConnectionOpenInit;
use ibc::core::ics03_connection::msgs::conn_open_try::MsgConnectionOpenTry;
use ibc::core::ics04_channel::msgs::acknowledgement::MsgAcknowledgement;
use ibc::core::ics04_channel::msgs::chan_close_confirm::MsgChannelCloseConfirm;
use ibc::core::ics04_channel::msgs::chan_close_init::MsgChannelCloseInit;
use ibc::core::ics04_channel::msgs::chan_open_ack::MsgChannelOpenAck;
use ibc::core::ics04_channel::msgs::chan_open_confirm::MsgChannelOpenConfirm;
use ibc::core::ics04_channel::msgs::chan_open_init::MsgChannelOpenInit;
use ibc::core::ics04_channel::msgs::chan_open_try::MsgChannelOpenTry;
use ibc::core::ics04_channel::msgs::recv_packet::MsgRecvPacket;
use ibc::core::ics04_channel::msgs::timeout::MsgTimeout;
use ibc::core::ics04_channel::msgs::timeout_on_close::MsgTimeoutOnClose;
use ibc::core::ics24_host::identifier::{ChannelId, PortId};
use scale_info::prelude::string::ToString;

pub trait WeightInfo {
	fn create_client(msg_create_client: MsgCreateClient) -> Weight;
	fn misbehaviour(msg_misbehaviour: MsgSubmitMisbehaviour) -> Weight;
	fn update_client(msg_update_client: MsgUpdateClient) -> Weight;
	fn upgrade_client(msg_upgrade_client: MsgUpgradeClient) -> Weight;

	fn conn_open_init(msg_conn_open_init: MsgConnectionOpenInit) -> Weight;
	fn conn_try_open(msg_conn_try_open: MsgConnectionOpenTry) -> Weight;
	fn conn_open_ack(msg_conn_open_ack: MsgConnectionOpenAck) -> Weight;
	fn conn_open_confirm(msg_conn_open_confirm: MsgConnectionOpenConfirm) -> Weight;

	fn channel_open_init(msg_channel_open_init: MsgChannelOpenInit) -> Weight;
	fn channel_open_try(msg_channel_open_try: MsgChannelOpenTry) -> Weight;
	fn channel_open_ack(msg_channel_open_ack: MsgChannelOpenAck) -> Weight;
	fn channel_open_confirm(msg_channel_open_confirm: MsgChannelOpenConfirm) -> Weight;
	fn channel_close_init(msg_channel_close_init: MsgChannelCloseInit) -> Weight;
	fn channel_close_confirm(msg_channel_close_confirm: MsgChannelCloseConfirm) -> Weight;

	fn recv_packet(msg_recv_packet: MsgRecvPacket) -> Weight;
	fn ack_packet(msg_ack_packet: MsgAcknowledgement) -> Weight;
	fn timeout_packet(msg_timeout_packet: MsgTimeout) -> Weight;
	fn timeout_on_close_packet(msg_timout_onclose_packet: MsgTimeoutOnClose) -> Weight;

	fn on_chan_open_init(msg: MsgChannelOpenInit) -> Weight;
	fn on_chan_open_try(msg: MsgChannelOpenTry) -> Weight;
	fn on_chan_open_ack(msg: MsgChannelOpenAck) -> Weight;
	fn on_chan_open_confirm(msg: MsgChannelOpenConfirm) -> Weight;
	fn on_chan_close_init(msg: MsgChannelCloseInit) -> Weight;
	fn on_chan_close_confirm(msg: MsgChannelCloseConfirm) -> Weight;
	fn on_recv_packet(msg: MsgRecvPacket) -> Weight;
	fn on_acknowledgement_packet(msg: MsgAcknowledgement) -> Weight;
	fn on_timeout_packet(msg: MsgTimeout) -> Weight;
}

impl WeightInfo for () {
	fn create_client(_msg_create_client: MsgCreateClient) -> Weight {
		Weight::default()
	}

	fn misbehaviour(_msg_misbehaviour: MsgSubmitMisbehaviour) -> Weight {
		Weight::default()
	}

	fn update_client(_msg_update_client: MsgUpdateClient) -> Weight {
		Weight::default()
	}

	fn upgrade_client(_msg_upgrade_client: MsgUpgradeClient) -> Weight {
		Weight::default()
	}

	fn conn_open_init(_msg_conn_open_init: MsgConnectionOpenInit) -> Weight {
		Weight::default()
	}

	fn conn_try_open(_msg_conn_try_open: MsgConnectionOpenTry) -> Weight {
		Weight::default()
	}

	fn conn_open_ack(_msg_conn_open_ack: MsgConnectionOpenAck) -> Weight {
		Weight::default()
	}

	fn conn_open_confirm(_msg_conn_open_confirm: MsgConnectionOpenConfirm) -> Weight {
		Weight::default()
	}

	fn channel_open_init(_msg_channel_open_init: MsgChannelOpenInit) -> Weight {
		Weight::default()
	}

	fn channel_open_try(_msg_channel_open_try: MsgChannelOpenTry) -> Weight {
		Weight::default()
	}

	fn channel_open_ack(_msg_channel_open_ack: MsgChannelOpenAck) -> Weight {
		Weight::default()
	}

	fn channel_open_confirm(_msg_channel_open_confirm: MsgChannelOpenConfirm) -> Weight {
		Weight::default()
	}

	fn channel_close_init(_msg_channel_close_init: MsgChannelCloseInit) -> Weight {
		Weight::default()
	}

	fn channel_close_confirm(_msg_channel_close_confirm: MsgChannelCloseConfirm) -> Weight {
		Weight::default()
	}

	fn recv_packet(_msg_recv_packet: MsgRecvPacket) -> Weight {
		Weight::default()
	}

	fn ack_packet(_msg_ack_packet: MsgAcknowledgement) -> Weight {
		Weight::default()
	}

	fn timeout_packet(_msg_timeout_packet: MsgTimeout) -> Weight {
		Weight::default()
	}

	fn timeout_on_close_packet(_msg_timout_onclose_packet: MsgTimeoutOnClose) -> Weight {
		Weight::default()
	}

	fn on_chan_open_init(_msg: MsgChannelOpenInit) -> Weight {
		Weight::default()
	}

	fn on_chan_open_try(_msg: MsgChannelOpenTry) -> Weight {
		Weight::default()
	}

	fn on_chan_open_ack(_msg: MsgChannelOpenAck) -> Weight {
		Weight::default()
	}

	fn on_chan_open_confirm(_msg: MsgChannelOpenConfirm) -> Weight {
		Weight::default()
	}

	fn on_chan_close_init(_msg: MsgChannelCloseInit) -> Weight {
		Weight::default()
	}

	fn on_chan_close_confirm(_msg: MsgChannelCloseConfirm) -> Weight {
		Weight::default()
	}

	fn on_recv_packet(_msg: MsgRecvPacket) -> Weight {
		Weight::default()
	}

	fn on_acknowledgement_packet(_msg: MsgAcknowledgement) -> Weight {
		Weight::default()
	}

	fn on_timeout_packet(_msg: MsgTimeout) -> Weight {
		Weight::default()
	}
}

pub struct WeightRouter<T: Config>(PhantomData<T>);

pub(crate) fn deliver<T: Config + Send + Sync>(msgs: &[Any]) -> Weight
{
	msgs.iter()
		.filter_map(|msg| {
			let type_url = String::from_utf8(msg.type_url.clone()).unwrap_or_default();
			let msg = ibc_proto::google::protobuf::Any { type_url, value: msg.value.clone() };
			let msg: Option<MsgEnvelope> = msg.try_into().ok();
			msg
		})
		.fold(Weight::default(), |acc, msg| {
			// Add benchmarked weight for that message type
			// Add benchmarked weight for module callback
			let temp = match msg {
				MsgEnvelope::ClientMsg(msgs) => match msgs {
					ClientMsg::CreateClient(msg) => <T as Config>::WeightInfo::create_client(msg),
					ClientMsg::UpdateClient(msg) => <T as Config>::WeightInfo::update_client(msg),
					ClientMsg::UpgradeClient(msg) => <T as Config>::WeightInfo::upgrade_client(msg),
					ClientMsg::Misbehaviour(msg) => <T as Config>::WeightInfo::misbehaviour(msg),
				},
				MsgEnvelope::ConnectionMsg(msgs) => match msgs {
					ConnectionMsg::ConnectionOpenInit(msg) =>
						<T as Config>::WeightInfo::conn_open_init(msg),
					ConnectionMsg::ConnectionOpenTry(msg) => <T as Config>::WeightInfo::conn_try_open(msg),
					ConnectionMsg::ConnectionOpenAck(msg) => <T as Config>::WeightInfo::conn_open_ack(msg),
					ConnectionMsg::ConnectionOpenConfirm(msg) => <T as Config>::WeightInfo::conn_open_confirm(msg),
				},
				MsgEnvelope::ChannelMsg(msgs) => match msgs {
					ChannelMsg::ChannelOpenInit(msg) => <T as Config>::WeightInfo::channel_open_init(msg),
					ChannelMsg::ChannelOpenTry(msg) => <T as Config>::WeightInfo::channel_open_try(msg),
					ChannelMsg::ChannelOpenAck(msg) => <T as Config>::WeightInfo::channel_open_ack(msg),
					ChannelMsg::ChannelOpenConfirm(msg) => <T as Config>::WeightInfo::channel_open_confirm(msg),
					ChannelMsg::ChannelCloseInit(msg) => <T as Config>::WeightInfo::channel_close_init(msg),
					ChannelMsg::ChannelCloseConfirm(msg) => <T as Config>::WeightInfo::channel_close_confirm(msg),
				},
				MsgEnvelope::PacketMsg(msg) => match msg {
					PacketMsg::RecvPacket(msg) => <T as Config>::WeightInfo::recv_packet(msg),
					PacketMsg::AckPacket(msg) => <T as Config>::WeightInfo::ack_packet(msg),
					PacketMsg::TimeoutPacket(msg) => <T as Config>::WeightInfo::timeout_packet(msg),
					PacketMsg::TimeoutOnClosePacket(msg) => <T as Config>::WeightInfo::timeout_on_close_packet(msg),
				}
			};
			acc.saturating_add(temp)
		})
}